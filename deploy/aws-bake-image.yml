---
- name: ensure an AWS VPC is set up
  hosts: all
  connection: local
  gather_facts: false
  roles:
    - aws-vpc

- name: launch an instance used to bake the service image
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: ensure an image security group exists
      ec2_group:
        region: "{{ region }}"
        name: "image security group"
        description: "security group to create images"
        vpc_id: "{{ vpc_result.vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "0.0.0.0/0"
      register: image_sg_result
    - name: launch instance
      ec2:
        region: "{{ region }}"
        assign_public_ip: yes
        vpc_subnet_id: "{{ vpc_result.subnets | subnetworks(vpc.web_subnets) | map(attribute='id') | first }}"
        group_id: "{{ image_sg_result.group_id }}"
        instance_profile_name: "{{ instance_profile_name }}"
        key_name: "{{ key_name }}"
        image: "{{ base_image }}"
        instance_type: t2.micro
        wait: true
        exact_count: 1
        count_tag:
          Name: image
        instance_tags:
          Name: image
      register: ec2

    - name: add new instance to host group
      add_host: hostname={{ ec2.tagged_instances | map(attribute='public_dns_name') | first }} groupname=launched

    - name: wait for SSH to come up
      wait_for: host={{ ec2.tagged_instances | map(attribute='public_dns_name') | first }} port=22 delay=10 timeout=320 state=started

- name: configure instance
  hosts: launched
  sudo: True
  gather_facts: False
  roles:
    - aws-demo-common
    - aws-demo-service

- name: create image and a corresponding launch configuration
  hosts: localhost
  connection: local
  tasks:
    - name: create image
      ec2_ami:
        region: "{{ region }}"
        instance_id: "{{ ec2.instance_ids | first }}"
        wait: yes
        name: "{{ image_name }}"
      register: image
    - name: terminate instance that was previously launched
      ec2:
        region: "{{ region }}"
        instance_ids: "{{ ec2.instance_ids | first }}"
        state: absent
    - name: create launch configuration
      ec2_lc:
        region: "{{ region }}"
        state: present
        assign_public_ip: true
        name: "{{ launch_configuration_name }}"
        image_id: "{{ image.image_id }}"
        instance_type: t2.micro
        instance_profile_name: "{{ instance_profile_name }}"
        security_groups: [ "{{ web_sg_result.group_id }}" ]
        key_name: "{{ key_name }}"